{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "assignment6(2019311492 이나은).ipynb의 사본",
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eA1CADB6bjrq"
      },
      "source": [
        "https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data?select=train.csv"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-E_b68pY5mo4"
      },
      "source": [
        "# 데이터 불러오기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4dtbd2USawD0"
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "URuVG2Pka_W5",
        "outputId": "f61d3157-991c-432e-f329-99b09084132b"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "X927cNstbSzI",
        "outputId": "67e6408e-0fc3-44b0-ae34-b8d9698814f0"
      },
      "source": [
        "data = pd.read_csv('/content/drive/MyDrive/기계학습 과제/assignment6/winequality-red.csv')\n",
        "\n",
        "data.head()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.9968</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.9970</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.9980</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   fixed acidity  volatile acidity  citric acid  ...  sulphates  alcohol  quality\n",
              "0            7.4              0.70         0.00  ...       0.56      9.4        5\n",
              "1            7.8              0.88         0.00  ...       0.68      9.8        5\n",
              "2            7.8              0.76         0.04  ...       0.65      9.8        5\n",
              "3           11.2              0.28         0.56  ...       0.58      9.8        6\n",
              "4            7.4              0.70         0.00  ...       0.56      9.4        5\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rCXGh-gE42kQ",
        "outputId": "8944521d-4310-43f8-c8e5-6bf640d99968"
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1599, 12)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w02kzzNmCzJx",
        "outputId": "bb4cc9d7-8b49-47d4-d144-e1a49537bb73"
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1566, 13)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lvZ6jsel5ppZ"
      },
      "source": [
        "#데이터셋 분석"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i-2po-mE55MT"
      },
      "source": [
        "##feature  설명"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nhNhSoJ33syZ"
      },
      "source": [
        "1. fixed acidity (고정산) : 와인의 산도와 관련\n",
        "2. volatile acidity (휘발산) : 와인의 향과 관련\n",
        "3. citric acid (구연산) : 와인의 신선함 향상\n",
        "4. residual sugar (잔여당) : 와인의 단맛을 향상\n",
        "5. chlorides (염화물) : 와인의 짠맛과 관련\n",
        "6. free sulfur dioxide (황화합물) : 와인을 오래 보관할 수 있도록 함\n",
        "7. total sulful dioxide (황화합물) : 6과 같음\n",
        "8. density (밀도) : 와인의 무게감\n",
        "9. pH (산성도) : 와인의 신맛 정도\n",
        "10. sulphates (황화합물) : 6과 같음\n",
        "11. alcohol (알코올) : 와인의 단맛과 무게감과 관련\n",
        "12. quality (와인의 질) : 예측해야 하는 값\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qg3ca3zm6LQ2"
      },
      "source": [
        "##데이터셋 shape\n",
        "(1599개의 rows, 12개의 column)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bL94mD593Puk",
        "outputId": "5ceeaaea-1636-407a-8905-06abc118832e"
      },
      "source": [
        "print(data.shape)"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1566, 12)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PpkmaSeq6VvK"
      },
      "source": [
        "##데이터셋 평균, 표준편차, 최대/최소"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "ZPCz0zTJLk4f",
        "outputId": "53c92a94-800a-4d15-b464-b04617dab2ee"
      },
      "source": [
        "data.describe()"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "      <td>1566.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>8.306577</td>\n",
              "      <td>0.529962</td>\n",
              "      <td>0.268985</td>\n",
              "      <td>2.438474</td>\n",
              "      <td>0.087303</td>\n",
              "      <td>15.688697</td>\n",
              "      <td>45.784802</td>\n",
              "      <td>0.996713</td>\n",
              "      <td>3.312114</td>\n",
              "      <td>0.657829</td>\n",
              "      <td>10.413506</td>\n",
              "      <td>5.629630</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.706829</td>\n",
              "      <td>0.178841</td>\n",
              "      <td>0.194129</td>\n",
              "      <td>1.064969</td>\n",
              "      <td>0.047037</td>\n",
              "      <td>9.914378</td>\n",
              "      <td>31.436492</td>\n",
              "      <td>0.001831</td>\n",
              "      <td>0.154213</td>\n",
              "      <td>0.170137</td>\n",
              "      <td>1.054721</td>\n",
              "      <td>0.807784</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>4.600000</td>\n",
              "      <td>0.120000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>0.012000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.990070</td>\n",
              "      <td>2.740000</td>\n",
              "      <td>0.330000</td>\n",
              "      <td>8.400000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.100000</td>\n",
              "      <td>0.395000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>1.900000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>0.995600</td>\n",
              "      <td>3.210000</td>\n",
              "      <td>0.550000</td>\n",
              "      <td>9.500000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.900000</td>\n",
              "      <td>0.520000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>2.200000</td>\n",
              "      <td>0.079000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>0.996720</td>\n",
              "      <td>3.310000</td>\n",
              "      <td>0.620000</td>\n",
              "      <td>10.150000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>9.200000</td>\n",
              "      <td>0.640000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>2.600000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.997800</td>\n",
              "      <td>3.400000</td>\n",
              "      <td>0.730000</td>\n",
              "      <td>11.100000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>15.600000</td>\n",
              "      <td>1.580000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>13.800000</td>\n",
              "      <td>0.611000</td>\n",
              "      <td>54.000000</td>\n",
              "      <td>155.000000</td>\n",
              "      <td>1.003150</td>\n",
              "      <td>4.010000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       fixed acidity  volatile acidity  ...      alcohol      quality\n",
              "count    1566.000000       1566.000000  ...  1566.000000  1566.000000\n",
              "mean        8.306577          0.529962  ...    10.413506     5.629630\n",
              "std         1.706829          0.178841  ...     1.054721     0.807784\n",
              "min         4.600000          0.120000  ...     8.400000     3.000000\n",
              "25%         7.100000          0.395000  ...     9.500000     5.000000\n",
              "50%         7.900000          0.520000  ...    10.150000     6.000000\n",
              "75%         9.200000          0.640000  ...    11.100000     6.000000\n",
              "max        15.600000          1.580000  ...    14.000000     8.000000\n",
              "\n",
              "[8 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IxJl9Bfy6Yuh"
      },
      "source": [
        "##피어슨 상관계수 - 선형관계분석"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "id": "jjxK59lBtLnZ",
        "outputId": "94fb3d8e-e770-46d6-f538-0ace208f40ee"
      },
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "corr = data.corr()\n",
        "\n",
        "sns.heatmap(corr, cmap='viridis')\n",
        "plt.show()"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1CkEBPW5fux6"
      },
      "source": [
        "#결측치 확인"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xXl5ynFw2jYX",
        "outputId": "c461263b-c75f-42c4-f6dc-95b9c1074da3"
      },
      "source": [
        "#결측치 확인\n",
        "data.isnull().sum()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "fixed acidity           0\n",
              "volatile acidity        0\n",
              "citric acid             0\n",
              "residual sugar          0\n",
              "chlorides               0\n",
              "free sulfur dioxide     0\n",
              "total sulfur dioxide    0\n",
              "density                 0\n",
              "pH                      0\n",
              "sulphates               0\n",
              "alcohol                 0\n",
              "quality                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "21OK_Izmf5ha"
      },
      "source": [
        "#이상치 확인 및 제거"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i5AN-IAjCK00"
      },
      "source": [
        "from sklearn.neighbors import LocalOutlierFactor\n",
        "\n",
        "outlier = LocalOutlierFactor()\n",
        "y_pred = outlier.fit_predict(data.drop(['quality'], axis=1))\n",
        "data['outlier'] = y_pred\n",
        "searched_data = data[data['outlier'] ==-1]\n",
        "data = data.drop(searched_data.index, axis=0)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2MYQOay9DS9H"
      },
      "source": [
        "data = data.drop('outlier', axis=1)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J3nPRJx4DfGZ",
        "outputId": "2427e437-d804-40c3-d3f6-35fb7fdd511b"
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1566, 12)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JqlfoVmE6fl2"
      },
      "source": [
        "#X, y 분리"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "MfPlV57CbdVY",
        "outputId": "45c00e8b-4f68-4532-953b-f411fff7af00"
      },
      "source": [
        "X = data.drop('quality', axis=1)\n",
        "\n",
        "X.head()"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.9968</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.9970</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.9980</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   fixed acidity  volatile acidity  citric acid  ...    pH  sulphates  alcohol\n",
              "0            7.4              0.70         0.00  ...  3.51       0.56      9.4\n",
              "1            7.8              0.88         0.00  ...  3.20       0.68      9.8\n",
              "2            7.8              0.76         0.04  ...  3.26       0.65      9.8\n",
              "3           11.2              0.28         0.56  ...  3.16       0.58      9.8\n",
              "4            7.4              0.70         0.00  ...  3.51       0.56      9.4\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "22yqe5LLSLm1",
        "outputId": "0ace48bc-47a8-4061-93b8-97b8f583c3cc"
      },
      "source": [
        "X.shape"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1566, 11)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6yCjMg1xb1xH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "outputId": "ca2b8d6b-2161-4d28-af42-3812c8fdfd79"
      },
      "source": [
        "y = data[['quality']]\n",
        "\n",
        "y.head()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   quality\n",
              "0        5\n",
              "1        5\n",
              "2        5\n",
              "3        6\n",
              "4        5"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vURbEWpASNkg",
        "outputId": "7abe7bff-b19c-47ff-a97f-4a24395c8036"
      },
      "source": [
        "y.shape"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1566, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h1bs453u6itm"
      },
      "source": [
        "#train, test split"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4RWJOF2NuzjB"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4)"
      ],
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZfFY9R906k7D"
      },
      "source": [
        "#정규화"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v-Gaijwhb6c6"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LHC5Pk926naN"
      },
      "source": [
        "#모델 생성"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oDr-25DNvcKs"
      },
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "model = LinearRegression()"
      ],
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1kL0DoqK9jtA",
        "outputId": "ed3f91af-85da-4d9b-ed7a-496659b7f15e"
      },
      "source": [
        "model.get_params().keys()"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['copy_X', 'fit_intercept', 'n_jobs', 'normalize'])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jp441lnV9SBm",
        "outputId": "c5555fc7-4660-4413-fd9d-31acdd712d6d"
      },
      "source": [
        "param_grid = {\n",
        "    'copy_X': [True, False],\n",
        "    'fit_intercept' : [True, False],\n",
        "    'n_jobs' : [-1, 1, 2, 3, 4, 5],\n",
        "    'normalize' : [True, False],\n",
        "}\n",
        "\n",
        "grid_search = GridSearchCV(model, param_grid=param_grid, cv=3, scoring='r2') \n",
        "\n",
        "grid_search.fit(X_train_scaled, y_train)\n",
        "\n",
        "print(grid_search.best_params_)"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'normalize': True}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JKB7KV1r_Qwr"
      },
      "source": [
        "model = LinearRegression(copy_X= True, fit_intercept=True, n_jobs=-1, normalize=True)"
      ],
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UH9IAiONv98D",
        "outputId": "c0a3b21c-7beb-4f6d-bf66-5abf77d0e9c4"
      },
      "source": [
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "\n",
        "model.fit(X_train_scaled, y_train)\n",
        "y_pred = model.predict(X_test_scaled)\n",
        "\n",
        "print('MSE : {0:.3f}'.format(mean_squared_error(y_test, y_pred)))\n",
        "\n",
        "print('MAE : {0:.3f}'.format(mean_absolute_error(y_test, y_pred)))\n",
        "\n",
        "print('R2 : {0:.3f}'.format(r2_score(y_test, y_pred)))\n",
        "print('train R2 : ', model.score(X_train_scaled, y_train))"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MSE : 0.423\n",
            "MAE : 0.518\n",
            "R2 : 0.360\n",
            "train R2 :  0.36810508139693\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yHT4-0AR6qZt"
      },
      "source": [
        "#RFE - feature selection"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S3lLdIvMxRxl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a59d2398-0690-4ca9-eb6b-c501a27fb7bf"
      },
      "source": [
        "from sklearn.feature_selection import RFE\n",
        "\n",
        "best_r2 = 0\n",
        "best_mse = 0\n",
        "best_mae = 0\n",
        "best_feature = []\n",
        "\n",
        "for i in range(1, 12) : \n",
        "\n",
        "  selector = RFE(model, n_features_to_select=i)\n",
        "  selector = selector.fit(X_train_scaled, y_train)\n",
        "\n",
        "  feature_bool = selector.support_\n",
        "\n",
        "  temp = []\n",
        "\n",
        "  for j in range(len(feature_bool)):\n",
        "    if feature_bool[j] == True:\n",
        "      temp.append(j)\n",
        "\n",
        "  X_train_selected = X_train.iloc[:, temp]\n",
        "  X_test_selected = X_test.iloc[:, temp]\n",
        "\n",
        "  X_train_selected = scaler.fit_transform(X_train_selected)\n",
        "  X_test_selected = scaler.transform(X_test_selected)\n",
        "\n",
        "  model.fit(X_train_selected, y_train)\n",
        "  y_pred = model.predict(X_test_selected)\n",
        "\n",
        "  print(i)\n",
        "\n",
        "  print('MSE : {0:.3f}'.format(mean_squared_error(y_test, y_pred)))\n",
        "\n",
        "  print('MAE : {0:.3f}'.format(mean_absolute_error(y_test, y_pred)))\n",
        "\n",
        "  print('R2 : {0:.3f}'.format(r2_score(y_test, y_pred)))\n",
        "\n",
        "  print('train R2 : {0:.3f}'.format(model.score(X_train_selected, y_train)))\n",
        "\n",
        "\n",
        "  if best_r2 < r2_score(y_test, y_pred) :\n",
        "    best_r2 = r2_score(y_test, y_pred)\n",
        "    best_mse = mean_squared_error(y_test, y_pred)\n",
        "    best_mae = mean_absolute_error(y_test, y_pred)\n",
        "    best_feature = temp"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "1\n",
            "MSE : 0.499\n",
            "MAE : 0.567\n",
            "R2 : 0.246\n",
            "train R2 : 0.223\n",
            "2\n",
            "MSE : 0.441\n",
            "MAE : 0.535\n",
            "R2 : 0.333\n",
            "train R2 : 0.315\n",
            "3\n",
            "MSE : 0.439\n",
            "MAE : 0.527\n",
            "R2 : 0.335\n",
            "train R2 : 0.342\n",
            "4\n",
            "MSE : 0.436\n",
            "MAE : 0.524\n",
            "R2 : 0.341\n",
            "train R2 : 0.351\n",
            "5\n",
            "MSE : 0.429\n",
            "MAE : 0.520\n",
            "R2 : 0.352\n",
            "train R2 : 0.360\n",
            "6\n",
            "MSE : 0.424\n",
            "MAE : 0.517\n",
            "R2 : 0.358\n",
            "train R2 : 0.365\n",
            "7\n",
            "MSE : 0.424\n",
            "MAE : 0.518\n",
            "R2 : 0.359\n",
            "train R2 : 0.366\n",
            "8\n",
            "MSE : 0.424\n",
            "MAE : 0.518\n",
            "R2 : 0.358\n",
            "train R2 : 0.367\n",
            "9\n",
            "MSE : 0.422\n",
            "MAE : 0.517\n",
            "R2 : 0.361\n",
            "train R2 : 0.368\n",
            "10\n",
            "MSE : 0.423\n",
            "MAE : 0.517\n",
            "R2 : 0.361\n",
            "train R2 : 0.368\n",
            "11\n",
            "MSE : 0.423\n",
            "MAE : 0.518\n",
            "R2 : 0.360\n",
            "train R2 : 0.368\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2kHhEEy8KHAW",
        "outputId": "109e9aa9-ca58-4c54-f447-bfe7cfb8572c"
      },
      "source": [
        "print(\"MSE : \", best_mse)\n",
        "print(\"MAE : \", best_mae)\n",
        "print(\"R2 :\", best_r2)\n",
        "print(best_feature)\n",
        "print(len(best_feature))"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MSE :  0.4223677453005166\n",
            "MAE :  0.5172265347876316\n",
            "R2 : 0.36115895388415187\n",
            "[0, 1, 2, 4, 5, 6, 8, 9, 10]\n",
            "9\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p-E9jY-TDu2A"
      },
      "source": [
        "#결과 분석"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nRcSlwRgDxGr"
      },
      "source": [
        "> 이번 과제에서는 linear regression을 이용하여 와인의 품질을 예측하였다. linear regression은 선형 관계를 나타내는 데이터에서 잘 작동하기 때문에 피어슨 상관계수를 이용하여 데이터셋의 선형관계를 분석해보았다. 그 결과 딱히 선형성이 나타나지 않았고 따라서 train, test set 모두 R2 값이 낮게 나왔다. (0.368, 0.360)\n",
        "\n",
        "\n",
        "> 그러나 train, test set의 R2 값이 유사하게 나온 걸로 보아 오버피팅을 일어나지 않았다는 것을 알 수 있다. 그 이유는 오버피팅을 막기 위해 train, test set을 분리하였으며 StandardScaler를 이용하여 정규화를 하였기 때문이다.\n",
        "\n",
        "\n",
        "> 그리고 feature selection을 위해 RFE 방법을 사용하였는데 11개의 X_feature 중 9개가 선택이 되었을 때 가장 R2 값이 높게 나왔다. feature selection을 하지 않았을 때 test set의 R2 값은 0.360인데 feature selection을 사용하였을 때는 0,361로 아주 근사하게 성능이 좋아졌다.\n",
        "\n",
        "\n",
        "> 본 과제를 수행하기 위해 linear regression 이 아닌 다른 회귀 모델로 실험을 해본다면 더 성능이 좋은 모델을 구축할 수 있을 것 같다.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}
